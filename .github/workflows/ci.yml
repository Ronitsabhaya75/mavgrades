name: CI - Full Pipeline

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref to test'
        required: false
        default: 'main'
  workflow_call:
    inputs:
      ref:
        description: 'Git ref to test'
        required: false
        type: string
        default: 'main'

jobs:
  # Stage 1: Setup and Dependencies
  setup:
    name: "üîß Setup & Dependencies"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref || github.ref }}
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies with retry
      run: |
        for i in {1..3}; do
          echo "Attempt $i to install dependencies..."
          if npm ci --prefer-offline --no-audit; then
            echo "Dependencies installed successfully!"
            break
          else
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
          if [ $i -eq 3 ]; then
            echo "All attempts failed"
            exit 1
          fi
        done
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
          .next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

  # Stage 2: Linting (depends on setup)
  lint:
    name: "üìù Code Linting"
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref || github.ref }}
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        
    - name: Install dependencies (if cache miss)
      run: npm ci --prefer-offline --no-audit
      
    - name: Run ESLint
      run: npm run lint

  # Stage 3: Type Checking (depends on lint)
  type-check:
    name: "üîç Type Checking"
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref || github.ref }}
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        
    - name: Install dependencies (if cache miss)
      run: npm ci --prefer-offline --no-audit
      
    - name: TypeScript type check
      run: npx tsc --noEmit

  # Stage 4: Build (depends on type-check)
  build:
    name: "üèóÔ∏è Build Application"
    runs-on: ubuntu-latest
    needs: type-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref || github.ref }}
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        
    - name: Install dependencies (if cache miss)
      run: npm ci --prefer-offline --no-audit
      
    - name: Build Next.js application
      run: npm run build
      
    - name: Verify build artifacts
      run: |
        if [ ! -d ".next" ]; then
          echo "‚ùå Build failed - .next directory not found"
          exit 1
        fi
        echo "‚úÖ Build successful - artifacts created!"
        ls -la .next/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nextjs-build
        path: |
          .next/
          public/
        retention-days: 1

  # Stage 5: Final Validation (depends on build)
  validate:
    name: "‚úÖ Final Validation"
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: nextjs-build
        
    - name: Validate build structure
      run: |
        echo "üîç Validating build structure..."
        if [ ! -d ".next" ]; then
          echo "‚ùå .next directory missing"
          exit 1
        fi
        if [ ! -f ".next/BUILD_ID" ]; then
          echo "‚ùå BUILD_ID missing"
          exit 1
        fi
        echo "‚úÖ All validations passed!"
        echo "üéâ Gatekeeper tests completed successfully!"
