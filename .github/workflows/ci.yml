name: CI - Full Pipeline

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref to test'
        required: false
        default: 'main'
  workflow_call:
    inputs:
      ref:
        description: 'Git ref to test'
        required: false
        type: string
        default: 'main'

jobs:
  # Stage 1: Setup and Dependencies
  setup:
    name: "🔧 Setup & Dependencies"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref || github.ref }}
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies with retry
      run: |
        for i in {1..3}; do
          echo "Attempt $i to install dependencies..."
          # First try npm ci, if it fails due to lock file mismatch, use npm install
          if npm ci --prefer-offline --no-audit 2>/dev/null; then
            echo "Dependencies installed successfully with npm ci!"
            break
          elif npm install --prefer-offline --no-audit; then
            echo "Dependencies installed successfully with npm install!"
            break
          else
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
          if [ $i -eq 3 ]; then
            echo "All attempts failed"
            exit 1
          fi
        done
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
          .next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

  # Stage 2: Linting (depends on setup)
  lint:
    name: "📝 Code Linting"
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref || github.ref }}
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        
    - name: Install dependencies (if cache miss)
      run: npm ci --prefer-offline --no-audit 2>/dev/null || npm install --prefer-offline --no-audit
      
    - name: Run ESLint
      run: npm run lint

  # Stage 3: Type Checking (depends on lint)
  type-check:
    name: "🔍 Type Checking"
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref || github.ref }}
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        
    - name: Install dependencies (if cache miss)
      run: npm ci --prefer-offline --no-audit 2>/dev/null || npm install --prefer-offline --no-audit
      
    - name: TypeScript type check
      run: npx tsc --noEmit

  # Stage 4: Build and Validate (depends on type-check)
  build-and-validate:
    name: "🏗️ Build & Validate"
    runs-on: ubuntu-latest
    needs: type-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref || github.ref }}
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        
    - name: Install dependencies (if cache miss)
      run: npm ci --prefer-offline --no-audit 2>/dev/null || npm install --prefer-offline --no-audit
      
    - name: Build Next.js application
      run: npm run build
      
    - name: Validate build artifacts
      run: |
        echo "🔍 Validating build structure..."
        if [ ! -d ".next" ]; then
          echo "❌ Build failed - .next directory not found"
          exit 1
        fi
        
        echo "✅ .next directory found"
        echo "📋 .next directory contents:"
        ls -la .next/
        
        # Check for essential build files
        if [ -f ".next/BUILD_ID" ]; then
          echo "✅ BUILD_ID found: $(cat .next/BUILD_ID)"
        else
          echo "⚠️ BUILD_ID missing, but build completed"
        fi
        
        # Check for static files
        if [ -d ".next/static" ]; then
          echo "✅ Static assets directory found"
        fi
        
        # Check for server files
        if [ -f ".next/server/app/page.js" ] || [ -f ".next/server/pages/index.js" ] || ls .next/server/ 2>/dev/null; then
          echo "✅ Server files found"
        fi
        
        echo "✅ Build validation completed successfully!"
        echo "🎉 CI pipeline tests completed successfully!"
